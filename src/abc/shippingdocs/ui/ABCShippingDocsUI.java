/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package abc.shippingdocs.ui;

import abc.shippingdocs.utilities.CellStyleObject;
import abc.shippingdocs.utilities.DataManager;
import abc.shippingdocs.utilities.StyleUtil;
import abc.shippingdocs.utilities.StyleUtil.Decoration;
import com.itextpdf.html2pdf.HtmlConverter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.util.IOUtils;

/**
 *
 * @author dwink
 */
public class ABCShippingDocsUI extends javax.swing.JFrame {

    /**
     * Creates new form ABCShippingDocsUI
     */
    public ABCShippingDocsUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jDialog1 = new javax.swing.JDialog();
        jDialog2 = new javax.swing.JDialog();
        jMenu1 = new javax.swing.JMenu();
        jDialog3 = new javax.swing.JDialog();
        jMenu5 = new javax.swing.JMenu();
        jDialog4 = new javax.swing.JDialog();
        jDialog5 = new javax.swing.JDialog();
        jDialog6 = new javax.swing.JDialog();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jDialog7 = new javax.swing.JDialog();
        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        inventorySheetPath = new javax.swing.JTextField();
        inventorySheetBrowse = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        bloodReportsDirectoryPath = new javax.swing.JTextField();
        bloodReportsDirectoryBrowse = new javax.swing.JButton();
        uploatInventoryFileButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        masterBatchButton = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenu1.setText("jMenu1");

        javax.swing.GroupLayout jDialog3Layout = new javax.swing.GroupLayout(jDialog3.getContentPane());
        jDialog3.getContentPane().setLayout(jDialog3Layout);
        jDialog3Layout.setHorizontalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog3Layout.setVerticalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenu5.setText("jMenu5");

        javax.swing.GroupLayout jDialog4Layout = new javax.swing.GroupLayout(jDialog4.getContentPane());
        jDialog4.getContentPane().setLayout(jDialog4Layout);
        jDialog4Layout.setHorizontalGroup(
            jDialog4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog4Layout.setVerticalGroup(
            jDialog4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog5Layout = new javax.swing.GroupLayout(jDialog5.getContentPane());
        jDialog5.getContentPane().setLayout(jDialog5Layout);
        jDialog5Layout.setHorizontalGroup(
            jDialog5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog5Layout.setVerticalGroup(
            jDialog5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog6Layout = new javax.swing.GroupLayout(jDialog6.getContentPane());
        jDialog6.getContentPane().setLayout(jDialog6Layout);
        jDialog6Layout.setHorizontalGroup(
            jDialog6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog6Layout.setVerticalGroup(
            jDialog6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog7Layout = new javax.swing.GroupLayout(jDialog7.getContentPane());
        jDialog7.getContentPane().setLayout(jDialog7Layout);
        jDialog7Layout.setHorizontalGroup(
            jDialog7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog7Layout.setVerticalGroup(
            jDialog7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Inventory Sheet:");

        inventorySheetBrowse.setText("Browse");
        inventorySheetBrowse.setAutoscrolls(true);
        inventorySheetBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventorySheetBrowseActionPerformed(evt);
            }
        });

        jLabel2.setText("Blood Reports Directory:");

        bloodReportsDirectoryBrowse.setText("Browse");
        bloodReportsDirectoryBrowse.setAutoscrolls(true);
        bloodReportsDirectoryBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bloodReportsDirectoryBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bloodReportsDirectoryPath))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(inventorySheetPath, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inventorySheetBrowse)
                    .addComponent(bloodReportsDirectoryBrowse))
                .addContainerGap(362, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inventorySheetPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inventorySheetBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(bloodReportsDirectoryPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bloodReportsDirectoryBrowse))
                .addContainerGap(366, Short.MAX_VALUE))
        );

        inventorySheetPath.getAccessibleContext().setAccessibleName("inventorySheetPath");

        uploatInventoryFileButton.setText("Upload Inventory File");
        uploatInventoryFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploatInventoryFileButtonActionPerformed(evt);
            }
        });

        jButton1.setText("PDF");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        masterBatchButton.setText("Master Batch");
        masterBatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                masterBatchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(masterBatchButton)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(49, 49, 49)
                        .addComponent(uploatInventoryFileButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uploatInventoryFileButton)
                    .addComponent(jButton1)
                    .addComponent(masterBatchButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inventorySheetBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventorySheetBrowseActionPerformed
        final JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Microsoft Excel (*.xls, *.xlsx)", "xls", "xlsx");
        fc.setFileFilter(filter);
        fc.setDialogTitle("Open Inventory File");
        int returnVal = fc.showOpenDialog(ABCShippingDocsUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String path = fc.getSelectedFile().getPath();
            inventorySheetPath.setText(path);
        }
    }//GEN-LAST:event_inventorySheetBrowseActionPerformed

    private void uploatInventoryFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploatInventoryFileButtonActionPerformed
        DataManager dm = DataManager.getInstance();
        String inventoryPath = inventorySheetPath.getText();
        String reportsPath = bloodReportsDirectoryPath.getText();
        if (!"".equals(inventoryPath) && !"".equals(reportsPath)) {
            File file = new File(inventoryPath);
            try {
                dm.loadWorkbook(file, reportsPath);
                DefaultListModel<String> model = new DefaultListModel<>();
                JList plantList = new JList(model);
                ArrayList<String> plantNames = dm.getPlantNames();
                for (String name : plantNames) {
                    model.addElement(name);
                }
                JScrollPane scrollPane = new JScrollPane(plantList);
                removeAll();
                scrollPane.setSize(300, 300);
                add(scrollPane);
                revalidate();
                repaint();
            } catch (IOException ex) {
                Logger.getLogger(ABCShippingDocsUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_uploatInventoryFileButtonActionPerformed

    private void bloodReportsDirectoryBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bloodReportsDirectoryBrowseActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setDialogTitle("Choose Blood Reports Directory");
        int returnVal = fc.showOpenDialog(ABCShippingDocsUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String path = fc.getSelectedFile().getPath();
            bloodReportsDirectoryPath.setText(path);
        }
    }//GEN-LAST:event_bloodReportsDirectoryBrowseActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(ABCShippingDocsUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                String path = fc.getSelectedFile().getPath();
                String html = new String(Files.readAllBytes(Paths.get(path)));
                HtmlConverter.convertToPdf(html, new FileOutputStream("C:\\Users\\dwink\\Documents\\PDFs\\Test.pdf"));
                System.out.println("Done");
            } catch (IOException ex) {
                Logger.getLogger(ABCShippingDocsUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void masterBatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_masterBatchButtonActionPerformed
        Workbook masterBatch = new XSSFWorkbook();
        Sheet sheet = masterBatch.createSheet("Sheet1");
        addTitle(sheet, masterBatch);
        addLabelCell(1, 0, "Sample Date:", sheet, masterBatch);
        addLabelCell(2, 0, "Number of Liters:", sheet, masterBatch);
        addLabelCell(1, 3, "PO:", sheet, masterBatch);
        addLabelCell(2, 2, "Number of Lots:", sheet, masterBatch, true);
        addLabelCell(1, 5, "Invoice No.", sheet, masterBatch, true);
        addLabelCell(2, 5, "Part Number:", sheet, masterBatch, true);
        addValueCell(1, 1, "", sheet, masterBatch);
        addValueCell(2, 1, "", sheet, masterBatch);
        addValueCell(1, 4, "", sheet, masterBatch);
        addValueCell(2, 4, "", sheet, masterBatch);
        addValueCell(1, 7, "", sheet, masterBatch);
        addValueCell(2, 7, "", sheet, masterBatch);
        addCell(4, 5, "Lot No", sheet, masterBatch, true);
        addCell(4, 8, "Lot No", sheet, masterBatch, true);
        addCell(4, 10, "Liters", sheet, masterBatch);
        addCell(4, 11, "Lots", sheet, masterBatch);
        addCell(4, 12, "Page", sheet, masterBatch, false, new CellStyleObject(new Decoration[]{}, "Calibri", (short) 11, HorizontalAlignment.RIGHT));
        addCell(5, 3, "Sample 1", sheet, masterBatch, false, new CellStyleObject(new Decoration[]{Decoration.BOLD}, "Calibri", (short) 11, HorizontalAlignment.RIGHT));
        addCell(16, 9, "Totals:", sheet, masterBatch, false, new CellStyleObject(new Decoration[]{Decoration.BOLD}, "Calibri", (short) 11, HorizontalAlignment.RIGHT));
        addCell(5, 7, "Through", sheet, masterBatch);
        addLogo(sheet, masterBatch);
        masterBatch.setPrintArea(0, "$A$1:$O$42");
        try {
            FileOutputStream fileOut = new FileOutputStream("C:\\Users\\dwink\\Documents\\PDFs\\Test.xlsx");
            masterBatch.write(fileOut);
            fileOut.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ABCShippingDocsUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ABCShippingDocsUI.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_masterBatchButtonActionPerformed

    private void addTitle(Sheet sheet, Workbook wb) {
        Row row = sheet.createRow(0);
        row.setHeight((short) (40 * 20));
        CellRangeAddress range = new CellRangeAddress(0, 0, 0, 1);
        sheet.addMergedRegion(range);
        sheet.setColumnWidth(0, 35 * 256);
        Cell titleCell = row.createCell(0);
        titleCell.setCellValue("MASTER BATCH RECORD");
        CellStyle borderStyle = wb.createCellStyle();
        StyleUtil.addBorderToCell(borderStyle, BorderStyle.MEDIUM);
        borderStyle.setAlignment(HorizontalAlignment.CENTER);
        borderStyle.setFont(StyleUtil.createFont(wb, "Calibri", new Decoration[]{Decoration.BOLD}, (short) 20));
        titleCell.setCellStyle(borderStyle);
        row.createCell(1).setCellStyle(borderStyle);
    }

    private void addLabelCell(int rowIndex, int cellIndex, String label, Sheet sheet, Workbook wb) {
        addLabelCell(rowIndex, cellIndex, label, sheet, wb, false);
    }

    private void addLabelCell(int rowIndex, int cellIndex, String label, Sheet sheet, Workbook wb, boolean merge) {
        Row row = sheet.getRow(rowIndex);
        if (row == null) {
            row = sheet.createRow(rowIndex);
        }
        Cell labelCell = row.createCell(cellIndex);
        labelCell.setCellValue(label);
        CellStyle style = wb.createCellStyle();
        Font font = StyleUtil.createFont(wb, "Calibri", new Decoration[]{Decoration.BOLD}, (short) 11);
        style.setFont(font);
        style.setAlignment(HorizontalAlignment.RIGHT);
        labelCell.setCellStyle(style);
        if (merge) {
            CellRangeAddress range = new CellRangeAddress(rowIndex, rowIndex, cellIndex, cellIndex + 1);
            sheet.addMergedRegion(range);
        }
    }

    private void addValueCell(int rowIndex, int cellIndex, String value, Sheet sheet, Workbook wb) {
        Row row = sheet.getRow(rowIndex);
        if (row == null) {
            row = sheet.createRow(rowIndex);
        }
        Cell labelCell = row.createCell(cellIndex);
        labelCell.setCellValue(value);
        CellStyle style = wb.createCellStyle();
        Font font = StyleUtil.createFont(wb, "Calibri", new Decoration[]{}, (short) 11);
        style.setFont(font);
        style.setAlignment(HorizontalAlignment.CENTER);
        StyleUtil.addBorderToCell(style, BorderStyle.MEDIUM);
        labelCell.setCellStyle(style);
    }

    private void addCell(int rowIndex, int cellIndex, String value, Sheet sheet, Workbook wb) {
        addCell(rowIndex, cellIndex, value, sheet, wb, false);
    }

    private void addCell(int rowIndex, int cellIndex, String value, Sheet sheet, Workbook wb, boolean merge) {
        addCell(rowIndex, cellIndex, value, sheet, wb, merge, new CellStyleObject(new Decoration[]{}, "Calibri", (short) 11, HorizontalAlignment.CENTER));
    }

    private void addCell(int rowIndex, int cellIndex, String value, Sheet sheet, Workbook wb, boolean merge, CellStyleObject styleOptions) {
        Row row = sheet.getRow(rowIndex);
        if (row == null) {
            row = sheet.createRow(rowIndex);
        }
        Cell labelCell = row.createCell(cellIndex);
        labelCell.setCellValue(value);
        CellStyle style = wb.createCellStyle();
        Font font = StyleUtil.createFont(wb, styleOptions.getFontName(), styleOptions.getDecorations(), styleOptions.getFontSize());
        style.setFont(font);
        style.setAlignment(styleOptions.getAlignment());
        labelCell.setCellStyle(style);
        if (merge) {
            CellRangeAddress range = new CellRangeAddress(rowIndex, rowIndex, cellIndex, cellIndex + 1);
            sheet.addMergedRegion(range);
        }
    }

    private void addLogo(Sheet sheet, Workbook wb) {
        InputStream is = null;
        try {
            is = new FileInputStream("C:\\Users\\dwink\\Documents\\NetBeansProjects\\ABCShippingDocs\\html\\abc_logo.png");
            byte[] bytes = IOUtils.toByteArray(is);
            int pictureIdx = wb.addPicture(bytes, Workbook.PICTURE_TYPE_JPEG);
            is.close();
            CreationHelper helper = wb.getCreationHelper();
            Drawing drawing = sheet.createDrawingPatriarch();
            //add a picture shape
            ClientAnchor anchor = helper.createClientAnchor();
            //set top-left corner of the picture,
            //subsequent call of Picture#resize() will operate relative to it
            anchor.setCol1(0);
            anchor.setRow1(5);
            Picture pict = drawing.createPicture(anchor, pictureIdx);
            //auto-size picture relative to its top-left corner
            pict.resize(1.4, 6.3);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ABCShippingDocsUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ABCShippingDocsUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                is.close();
            } catch (IOException ex) {
                Logger.getLogger(ABCShippingDocsUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ABCShippingDocsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ABCShippingDocsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ABCShippingDocsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ABCShippingDocsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ABCShippingDocsUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bloodReportsDirectoryBrowse;
    private javax.swing.JTextField bloodReportsDirectoryPath;
    private javax.swing.JButton inventorySheetBrowse;
    private javax.swing.JTextField inventorySheetPath;
    private javax.swing.JButton jButton1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JDialog jDialog3;
    private javax.swing.JDialog jDialog4;
    private javax.swing.JDialog jDialog5;
    private javax.swing.JDialog jDialog6;
    private javax.swing.JDialog jDialog7;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton masterBatchButton;
    private javax.swing.JButton uploatInventoryFileButton;
    // End of variables declaration//GEN-END:variables
}
